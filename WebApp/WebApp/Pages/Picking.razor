@page "/Picking"
@inject IJSRuntime jsRuntime;
@inject IDialogService _dialogService
@inject IPickingService _conferenciaService
@using Order = Application.App.ViewModels.Picking.Order
@using Product = Application.App.ViewModels.Picking.Product

<PageTitle>Picking</PageTitle>

@if (isLoading)
{
    <GridsToolbar @bind-DataInicial="_initialDate"
                  @bind-DataFinal="_finalDate"
                  @bind-TextoPedido="orderNumber"
                  OnAtualizar="HandleAtualizar"
                  OnKeyUpEvent="ConferirPedidoIndividual"
                  BotaoDesabilitado="_carregando"
                  BotaoCarregando="_carregando" />

    <MudDataGrid Items="@orders" Bordered="true">
        <Columns>
            <PropertyColumn Property="x => x.number" Title="Pedido" />
            <TemplateColumn Title="Conferir">
                <CellTemplate>
                    <MudButton @onclick="@(() => ConferirPedido(context.Item))" Size="@Size.Small" Variant="@Variant.Filled" Color="@(context.Item.buttonClass ? Color.Success : Color.Primary)">@(context.Item.buttonText)</MudButton>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Romaneio">
                <CellTemplate>
                    <MudButton @onclick="@(() => ImprimeRomaneio(context.Item))" Size="@Size.Small" Variant="@Variant.Filled" Color="@(context.Item.buttonPrintedClass == true ? Color.Success : Color.Primary)">@(context.Item.buttonPrintedText)</MudButton>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.client.cod_client" Title="Cliente" />
            <PropertyColumn Property="x => x.client.reason_client" Title="Nome" />
            <PropertyColumn Property="x => x.client.address_client" Title="Endereço" />
            <PropertyColumn Property="x => x.client.street_number_client" Title="Número" />
            <PropertyColumn Property="x => x.client.complement_address_client" Title="Complemento" />
            <PropertyColumn Property="x => x.invoice.amount_nf" Title="Valor Total" Format="C" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Order" />
        </PagerContent>
    </MudDataGrid>

    @*Refatorar Aqui (verificar a possibilidade de não passar essa janela como parametro, para conferencia do pedido ser mais rápida)*@
@*     <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.QrCodeScanner" Class="mr-3 mb-n1" />
                CONFERIR
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudGrid Spacing="1" Justify="Justify.SpaceAround">
                <MudItem>
                    <MudTextField @bind-Value="@inputValueVolumes" HelperText="Volume" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="pct/cx" Style="height:2.5rem" />
                </MudItem>
                <MudItem>
                    <MudTextField @ref="valueProdutoReference" T="string" OnKeyUp="AddItemAsPickedDialog" TextUpdateSuppression="false" Clearable="true" HelperText="Produto" Variant="Variant.Outlined" Style="height:2.5rem" />
                </MudItem>
                <MudItem>
                    <MudIconButton @onclick="@RemoveQtdeDialog" Color="Color.Primary" Size="@Size.Large" Variant="@Variant.Filled" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                </MudItem>
            </MudGrid>

            <MudDivider DividerType="DividerType.Middle" Class="my-2"></MudDivider>

            <MudDataGrid Items="@itens" Bordered="true">
                <Columns>
                    <PropertyColumn Property="@(item => $"{item.cod_product} - {item.description_product}")" Title="Descrição" />
                    <PropertyColumn Property="@(item => item.sku_product)" Title="Referência" />
                    <PropertyColumn Property="@(item => item.quantity_product)" Title="Qtde" />
                    <PropertyColumn Property="@(item => item.picked_quantity)" Title="Conferido" />
                </Columns>
            </MudDataGrid>
        </DialogContent>
        <DialogActions>
             <MudButton OnClick="Cancel">@_closeButtonText</MudButton>
            <MudButton Color="Color.Success">@ShowConfirmationDialog()</MudButton>
        </DialogActions>
    </MudDialog> *@
}
else
{
    <div class="my-custom-container">
        <LoadingOverlay Visible="@visible" />
    </div>
}

<script src="js/Utils.js"></script>

@code {
    private bool visible = true;
    private bool isLoading = false;
    private bool _carregando;

    private string? nr_pedido;
    private string? doc_company;
    private string? serie_order;
    private string? orderNumber;
    private MudTextField<string> valueProdutoReference;
    private int inputValueVolumes { get; set; } = 1;

    private DateTime? _initialDate = DateTime.Now; //Refatorar Aqui (essa variavel precisa se date only, para não dar b.o na query do select)
    private DateTime? _finalDate = DateTime.Now; //Refatorar Aqui (essa variavel precisa se date only, para não dar b.o na query do select)

    private IEnumerable<Order>? orders = new List<Order>();
    private IEnumerable<Product>? itens = new List<Product>();

    private RenderFragment PickingDialogBody => 
    @<div>
        <MudGrid Spacing="1" Justify="Justify.SpaceAround">
            <MudItem>
                <MudTextField @bind-Value="@inputValueVolumes" HelperText="Volume" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="pct/cx" Style="height:2.5rem" />
            </MudItem>
            <MudItem>
                <MudTextField @ref="valueProdutoReference" T="string" OnKeyUp="AddItemAsPickedDialog" TextUpdateSuppression="false" Clearable="true" HelperText="Produto" Variant="Variant.Outlined" Style="height:2.5rem" />
            </MudItem>
            <MudItem>
            <MudIconButton @onclick="@RemoveQtdeDialog" Color="Color.Primary" Size="@Size.Large" Variant="@Variant.Filled" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
            </MudItem>
        </MudGrid>

        <MudDivider DividerType="DividerType.Middle" Class="my-2"></MudDivider>

        <MudDataGrid Items="@itens" Bordered="true">
            <Columns>
                <PropertyColumn Property="@(item => $"{item.cod_product} - {item.description_product}")" Title="Descrição" />
                <PropertyColumn Property="@(item => item.sku_product)" Title="Referência" />
                <PropertyColumn Property="@(item => item.quantity_product)" Title="Qtde" />
                <PropertyColumn Property="@(item => item.picked_quantity)" Title="Conferido" />
            </Columns>
        </MudDataGrid>
    </div>
    ;

    protected override async Task OnInitializedAsync()
    {
        doc_company = await GetTextInLocalStorage("doc_company");
        serie_order = await GetTextInLocalStorage("serie_order");
        await LoadOrders();
        isLoading = true;
        visible = false;
    }

    private async Task LoadOrders()
    {
        if (_initialDate.HasValue && _finalDate.HasValue)
        {
            if (_initialDate.Value > _finalDate.Value)
            {
                await _dialogService.ShowMessageBox("Erro", "A data inicial não pode ser maior que a data final.");
                return;
            }

            orders = await _conferenciaService.GetUnpickedOrders(doc_company, serie_order, _initialDate.Value.ToString("yyyy-MM-dd"), _finalDate.Value.ToString("yyyy-MM-dd"));
            AssigningButtonProperties(orders?.ToList());
        }
    }

    private async Task HandleAtualizar()
    {
        isLoading = false;
        visible = true;
        _carregando = true;

        await LoadOrders();

        _carregando = false;
        isLoading = true;
        visible = false;
    }

    //Refatorar Aqui (colocar nome do método em ingles)
    private Task ConferirPedido(Order pedido)
    {
        this.nr_pedido = pedido.number;
        itens = pedido.itens.ToList();

        var options = new DialogOptions() { CloseButton = true, FullScreen = true };

        var parameters = new DialogParameters
        {
            { "_icon", @Icons.Material.Filled.QrCodeScanner },
            { "_closeButtonText", "Close" },
            { "_clickButtonText", "Conferir" },
            { "_titleContentText", "CONFERIR" },
            { "_onClickEvent", EventCallback.Factory.Create(this, ShowConfirmationDialog) },
            { "_bodyContent", PickingDialogBody }
        };

        return _dialogService.ShowAsync<ConfirmationDialogWithRenderFragment>("", parameters, options);
    }

    //Refatorar Aqui (colocar nome do método em ingles)
    private async Task ConferirPedidoIndividual(Enter evento) //Refatorar Aqui (verificar possibilidade de matar classe Enter)
    {
        if (evento.e.Code == "Enter" || evento.e.Code == "NumpadEnter")
        {
            isLoading = false;
            visible = true;

            var pedido = await _conferenciaService.GetUnpickedOrder(doc_company, serie_order, evento.orderNumber);
            this.nr_pedido = pedido.number;
            itens = pedido.itens.ToList();

            var options = new DialogOptions() { CloseButton = true, FullScreen = true }; //Refatorar Aqui (deixar essa classe fixa com essa propriedades)

            var parameters = new DialogParameters
            {
                { "_icon", @Icons.Material.Filled.QrCodeScanner },
                { "_closeButtonText", "Close" },
                { "_clickButtonText", "Conferir" },
                { "_titleContentText", "CONFERIR" },
                { "_onClickEvent", EventCallback.Factory.Create(this, ShowConfirmationDialog) },
                { "_bodyContent", PickingDialogBody }
            };

            await _dialogService.ShowAsync<ConfirmationDialogWithRenderFragment>("", parameters, options);

            isLoading = true;
            visible = false;
        }
    }

    private async Task RemoveQtdeDialog()
    {
        var item = orders
                        .Where(p => p.number == this.nr_pedido)
                        .First()
                   .itens
                        .Where(p => p.cod_product == Convert.ToInt32(valueProdutoReference.Value?.Trim()))
                        .First();

        if (item.picked_quantity <= 0)
        {
            var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true }; //Refatorar Aqui (deixar essa classe fixa com essa propriedades)

            var parameters = new DialogParameters
            {
                { "_titleContentText", "ATENÇÃO" },
                { "_dialogContentText", "Você está tentando remover uma quantidade menor do que a mínima necessária para este produto, deseja continuar?" },
                { "_onClickEvent", EventCallback.Factory.Create(this, () => RemoveQtde(item)) },
            };

            await _dialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
        }
        else
            await RemoveQtde(item);
    }

    private async Task RemoveQtde(Product item)
    {
        item.picked_quantity = item.picked_quantity - 1;
        await valueProdutoReference.Clear();
        StateHasChanged();
    }

    private Task ShowConfirmationDialog()
    {
        var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true }; //Refatorar Aqui (deixar essa classe fixa com essa propriedades)

        var parameters = new DialogParameters
        {
            { "_titleContentText", "ATENÇÃO" },
            { "_dialogContentText", "Você tem certeza que deseja conferir o pedido?" },
            { "_onClickEvent", EventCallback.Factory.Create(this, FinalizingPicking) }
        };

        return _dialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
    }

    private async Task FinalizingPicking()
    {
        isLoading = false;
        visible = true;

        var order = orders?.Where(p => p.number == this.nr_pedido).First();
        var result = await _conferenciaService.UpdateRetorno(order);

        if (result)
        {
            var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true };

            var parameters = new DialogParameters
            {
                { "_titleContentText", "SUCESSO!" },
                { "_dialogContentText", "Pedido conferido com sucesso!" }
            };

            await _dialogService.ShowAsync<AlertDialog>("", parameters, options);
        }
        else
        {
            var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true };

            var parameters = new DialogParameters
            {
                { "_titleContentText", "ERROR!" },
                { "_dialogContentText", "Erro ao conferir o pedido!" }
            };

            await _dialogService.ShowAsync<AlertDialog>("", parameters, options);
        }

        isLoading = true;
        visible = false;
    }

    private async Task AddItemAsPickedDialog(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            var item = orders
                            .Where(p => p.number == this.nr_pedido)
                            .First()
                       .itens
                            .Where(p => p.cod_product == Convert.ToInt32(valueProdutoReference.Value?.Trim()))
                            .First();

            if (item.picked_quantity >= item.quantity_product)
            {
                var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true }; //Refatorar Aqui (deixar essa classe fixa com essa propriedades)

                var parameters = new DialogParameters
                {
                    { "_titleContentText", "ATENÇÃO" },
                    { "_dialogContentText", "Você está tentando conferir uma quantidade maior do que a necessária deste produto, deseja continuar?" },
                    { "_onClickEvent", EventCallback.Factory.Create(this, () => AddItemAsPicked(item)) },
                };

                await _dialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
            }
            else
                await AddItemAsPicked(item);
        }
    }

    private async Task AddItemAsPicked(Product item)
    {
        item.picked_quantity = item.picked_quantity + 1;
        await valueProdutoReference.Clear();
        StateHasChanged();
    }

    private void AssigningButtonProperties(List<Order>? orders)
    {
        foreach (var pedido in orders)
        {
            if (pedido.retorno != null)
            {
                pedido.buttonText = "Conferido";
                pedido.buttonClass = true;
            }
            else
            {
                pedido.buttonText = "Conferir";
                pedido.buttonClass = false;
            }

            if (pedido.buttonPrintedClass)
            {
                pedido.buttonPrintedText = "Impresso";
                pedido.buttonPrintedClass = true;
            }
            else
            {
                pedido.buttonPrintedText = "Imprimir";
                pedido.buttonPrintedClass = false;
            }
        }
    }

    //Refatorar Aqui (colocar nome do método em ingles)
    private async Task ImprimeRomaneio(Order pedido)
    {
        isLoading = false;
        visible = true;

        var links = new List<string>();

        var base64String = await _conferenciaService.PrintCoupon(doc_company, serie_order, pedido.number);
        await jsRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64String, pedido.number);
        var dataUrl = $"data:application/pdf;base64,{base64String}";
        links.Add(dataUrl);

        await jsRuntime.InvokeVoidAsync("abrirAbas", links);

        isLoading = true;
        visible = false;
    }

    private async Task<string> GetTextInLocalStorage(string key)
    {
        return await jsRuntime.InvokeAsync<string>("localStorage.getItem", key);
    }
}
