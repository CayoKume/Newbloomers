@page "/Picking"
@inject IJSRuntime jsRuntime;
@inject IDialogService _dialogService
@inject IPickingService _conferenciaService
@using Domain.WebApp.Entities
@using Order = Application.WebApp.ViewModels.Picking.Order
@using Product = Application.WebApp.ViewModels.Picking.Product
@using static Domain.WebApp.Entities.AppContext

<PageTitle>Picking</PageTitle>

@if (isLoading)
{
    <GridsToolbar @bind-DataInicial="_initialDate"
                  @bind-DataFinal="_finalDate"
                  @bind-TextoPedido="orderNumber"
                  OnAtualizar="HandleAtualizar"
                  OnKeyUpEvent="ConferirPedidoIndividual"
                  BotaoDesabilitado="_carregando"
                  BotaoCarregando="_carregando" />

    <MudDataGrid Items="@orders" Bordered="true">
        <Columns>
            <PropertyColumn Property="x => x.number" Title="Pedido" />
            <TemplateColumn Title="Conferir">
                <CellTemplate>
                    <MudButton @onclick="@(() => ConferirPedido(context.Item))" Size="@Size.Small" Variant="@Variant.Filled" Color="@(context.Item.buttonClass ? Color.Success : Color.Primary)">@(context.Item.buttonText)</MudButton>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Romaneio">
                <CellTemplate>
                    <MudButton @onclick="@(() => ImprimeRomaneio(context.Item))" Size="@Size.Small" Variant="@Variant.Filled" Color="@(context.Item.buttonPrintedClass == true ? Color.Success : Color.Primary)">@(context.Item.buttonPrintedText)</MudButton>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.client.cod_client" Title="Cliente" />
            <PropertyColumn Property="x => x.client.reason_client" Title="Nome" />
            <PropertyColumn Property="x => x.client.address_client" Title="Endereço" />
            <PropertyColumn Property="x => x.client.street_number_client" Title="Número" />
            <PropertyColumn Property="x => x.client.complement_address_client" Title="Complemento" />
            <PropertyColumn Property="x => x.invoice.amount_nf" Title="Valor Total" Format="C" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Order" />
        </PagerContent>
    </MudDataGrid>
}
else
{
    <div class="my-custom-container">
        <LoadingOverlay Visible="@visible" />
    </div>
}

<script src="js/Utils.js"></script>

@code {
    private bool visible = true;
    private bool isLoading = false;
    private bool _carregando;

    private string? nr_pedido;
    private string? doc_company;
    private string? serie_order;
    private string? orderNumber;

    private DateTime? _initialDate = DateTime.Now; //Refatorar Aqui (essa variavel precisa se date only, para não dar b.o na query do select)
    private DateTime? _finalDate = DateTime.Now; //Refatorar Aqui (essa variavel precisa se date only, para não dar b.o na query do select)

    private IEnumerable<Order>? orders = new List<Order>();

    protected override async Task OnInitializedAsync()
    {
        doc_company = await GetTextInLocalStorage("doc_company");
        serie_order = await GetTextInLocalStorage("serie_order");
        await LoadOrders();
        isLoading = true;
        visible = false;
    }

    private async Task LoadOrders()
    {
        if (_initialDate.HasValue && _finalDate.HasValue)
        {
            if (_initialDate.Value > _finalDate.Value)
            {
                await _dialogService.ShowMessageBox("Erro", "A data inicial não pode ser maior que a data final.");
                return;
            }

            orders = await _conferenciaService.GetUnpickedOrders(doc_company, serie_order, _initialDate.Value.ToString("yyyy-MM-dd"), _finalDate.Value.ToString("yyyy-MM-dd"));
            AssigningButtonProperties(orders?.ToList());
        }
    }

    private async Task HandleAtualizar()
    {
        isLoading = false;
        visible = true;
        _carregando = true;

        await LoadOrders();

        _carregando = false;
        isLoading = true;
        visible = false;
    }

    //Refatorar Aqui (colocar nome do método em ingles)
    private async Task ConferirPedido(Order pedido)
    {
        this.nr_pedido = pedido.number;

        var options = new DialogOptions() { CloseButton = true, FullScreen = true };
        var parameters = new DialogParameters<PickingDialog>();
        var orderParaDialog = orders?.Where(p => p.number == this.nr_pedido).First();
        var listaParaConferencia = orders
            .First(p => p.number == this.nr_pedido)
            .itens;

        parameters.Add(p => p.Itens, listaParaConferencia);
        parameters.Add(p => p.Order, orderParaDialog);

        await _dialogService.ShowAsync<PickingDialog>("Conferência de Itens", parameters, options);
    }

    //Refatorar Aqui (colocar nome do método em ingles)
    private async Task ConferirPedidoIndividual(Enter evento) //Refatorar Aqui (verificar possibilidade de matar classe Enter)
    {
        if (evento.e.Code == "Enter" || evento.e.Code == "NumpadEnter")
        {
            isLoading = false;
            visible = true;

            var orderParaDialog = await _conferenciaService.GetUnpickedOrder(doc_company, serie_order, evento.orderNumber);
            this.nr_pedido = orderParaDialog.number;

            var options = new DialogOptions() { CloseButton = true, FullScreen = true }; //Refatorar Aqui (deixar essa classe fixa com essa propriedades)
            var parameters = new DialogParameters<PickingDialog>();
            var listaParaConferencia = orders
                .First(p => p.number == this.nr_pedido)
                .itens;

            parameters.Add(p => p.Itens, listaParaConferencia);
            parameters.Add(p => p.Order, orderParaDialog);

            await _dialogService.ShowAsync<PickingDialog>("Conferência de Itens", parameters, options);

            isLoading = true;
            visible = false;
        }
    }

    private void AssigningButtonProperties(List<Order>? orders)
    {
        foreach (var pedido in orders)
        {
            if (pedido.retorno != null)
            {
                pedido.buttonText = "Conferido";
                pedido.buttonClass = true;
            }
            else
            {
                pedido.buttonText = "Conferir";
                pedido.buttonClass = false;
            }

            if (pedido.buttonPrintedClass)
            {
                pedido.buttonPrintedText = "Impresso";
                pedido.buttonPrintedClass = true;
            }
            else
            {
                pedido.buttonPrintedText = "Imprimir";
                pedido.buttonPrintedClass = false;
            }
        }
    }

    //Refatorar Aqui (colocar nome do método em ingles)
    private async Task ImprimeRomaneio(Order pedido)
    {
        isLoading = false;
        visible = true;

        var links = new List<string>();

        var base64String = await _conferenciaService.PrintCoupon(doc_company, serie_order, pedido.number);
        await jsRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64String, pedido.number);
        var dataUrl = $"data:application/pdf;base64,{base64String}";
        links.Add(dataUrl);

        await jsRuntime.InvokeVoidAsync("abrirAbas", links);

        isLoading = true;
        visible = false;
    }

    private async Task<string> GetTextInLocalStorage(string key)
    {
        return await jsRuntime.InvokeAsync<string>("localStorage.getItem", key);
    }
}
