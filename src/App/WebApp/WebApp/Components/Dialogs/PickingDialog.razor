@inject IJSRuntime jsRuntime;
@inject IPickingService _conferenciaService
@inject IDialogService _dialogService;

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.QrCodeScanner" Class="mr-3 mb-n1"/>
            CONFERIR
        </MudText>
    </TitleContent>
    <DialogContent>
        <div>
            <MudGrid Spacing="1" Justify="Justify.SpaceAround">
                <MudItem>
                    <MudTextField @bind-Value="@inputValueVolumes" HelperText="Volume" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="pct/cx" Style="height:2.5rem" />
                </MudItem>
                <MudItem>
                    <MudTextField @ref="valueProdutoReference" T="string" OnKeyUp="AddItemAsPickedDialog" TextUpdateSuppression="false" Clearable="true" HelperText="Produto" Variant="Variant.Outlined" Style="height:2.5rem" />
                </MudItem>
                <MudItem>
                <MudIconButton @onclick="@RemoveQtdeDialog" Color="Color.Primary" Size="@Size.Large" Variant="@Variant.Filled" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                </MudItem>
            </MudGrid>
        
            <MudDivider DividerType="DividerType.Middle" Class="my-2"></MudDivider>
        
            <MudDataGrid Items="@Itens" Bordered="true">
                <Columns>
                    <PropertyColumn Property="@(item => $"{item.cod_product} - {item.description_product}")" Title="Descrição" />
                    <PropertyColumn Property="@(item => item.sku_product)" Title="Referência" />
                    <PropertyColumn Property="@(item => item.quantity_product)" Title="Qtde" />
                    <PropertyColumn Property="@(item => item.picked_quantity)" Title="Conferido" />
                </Columns>
            </MudDataGrid>
         </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
        <MudButton Color="Color.Success" OnClick="EventCallback.Factory.Create(this, ShowConfirmationDialog)">Conferir</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Application.WebApp.ViewModels.Picking.Order Order { get; set; } // Recebe a lista de itens da página

    [Parameter]
    public List<Application.WebApp.ViewModels.Picking.Product> Itens { get; set; } // Recebe a lista de itens da página

    private bool visible = true;
    private bool isLoading = false;
    private int inputValueVolumes = 1;
    private MudTextField<string> valueProdutoReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await valueProdutoReference.FocusAsync(); // Foca no campo ao abrir
        }
    }

    private async Task AddItemAsPickedDialog(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            var productCode = Convert.ToInt32(valueProdutoReference.Value?.Trim());
            var item = Itens.FirstOrDefault(p => p.cod_product == productCode);

            if (item.picked_quantity >= item.quantity_product)
            {
                var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true }; //Refatorar Aqui (deixar essa classe fixa com essa propriedades)

                var parameters = new DialogParameters
                {
                    { "_titleContentText", "ATENÇÃO" },
                    { "_dialogContentText", "Você está tentando conferir uma quantidade maior do que a necessária deste produto, deseja continuar?" },
                    { "_onClickEvent", EventCallback.Factory.Create(this, () => AddItemAsPicked(item)) },
                };

                await _dialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
            }
            else
                await AddItemAsPicked(item);

            StateHasChanged();
        }
    }

    private async Task AddItemAsPicked(Application.WebApp.ViewModels.Picking.Product item)
    {
        item.picked_quantity++;
        await valueProdutoReference.Clear();

        StateHasChanged();
    }

    private async Task RemoveQtdeDialog()
    {
        var productCode = Convert.ToInt32(valueProdutoReference.Value?.Trim());
        var item = Itens.FirstOrDefault(p => p.cod_product == productCode);

        if (item.picked_quantity <= 0)
        {
            var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true }; //Refatorar Aqui (deixar essa classe fixa com essa propriedades)

            var parameters = new DialogParameters
            {
                { "_titleContentText", "ATENÇÃO" },
                { "_dialogContentText", "Você está tentando remover uma quantidade menor do que a mínima necessária para este produto, deseja continuar?" },
                { "_onClickEvent", EventCallback.Factory.Create(this, () => RemoveQtde(item)) },
            };

            await _dialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
        }
        else
            await RemoveQtde(item);
    }

    private async Task RemoveQtde(Application.WebApp.ViewModels.Picking.Product item)
    {
        item.picked_quantity--;
        await valueProdutoReference.Clear();

        StateHasChanged();
    }

    private Task ShowConfirmationDialog()
    {
        var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true }; //Refatorar Aqui (deixar essa classe fixa com essa propriedades)

        var parameters = new DialogParameters
        {
            { "_titleContentText", "ATENÇÃO" },
            { "_dialogContentText", "Você tem certeza que deseja conferir o pedido?" },
            { "_onClickEvent", EventCallback.Factory.Create(this, FinalizingPicking) }
        };

        return _dialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
    }

    private async Task FinalizingPicking()
    {
        isLoading = false;
        visible = true;

        var result = await _conferenciaService.UpdateRetorno(Order);

        if (result)
        {
            var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true };

            var parameters = new DialogParameters
            {
                { "_titleContentText", "SUCESSO!" },
                { "_dialogContentText", "Pedido conferido com sucesso!" }
            };

            await _dialogService.ShowAsync<AlertDialog>("", parameters, options);
        }
        else
        {
            var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true };

            var parameters = new DialogParameters
            {
                { "_titleContentText", "ERROR!" },
                { "_dialogContentText", "Erro ao conferir o pedido!" }
            };

            await _dialogService.ShowAsync<AlertDialog>("", parameters, options);
        }

        isLoading = true;
        visible = false;
    }

    private void Cancel() => MudDialog.Cancel();
}
